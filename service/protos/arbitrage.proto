syntax = "proto3";

// Request containing a ticker and the security's starting floating point value.
message CurrencyArbitrageRequest {
    uint32 num_simulations = 1;
    bool fix_after = 2;
}

// Fetch exchange rates request
message FetchRatesRequest {
    string exchange_name = 1;
}

// Fetch exchange rates response (also used for streaming arbitrages)
message RatesResponse {
    string bank = 1;
    string exchange_name = 2;
    double rate = 3;
}

// Arbitrage service definition
service ArbitrageSimulation {
    // Streams quoted prices back that has a hidden arbitrage to detect
    rpc StreamCurrencyArbitrage (CurrencyArbitrageRequest) returns (stream RatesResponse) {}

    // Bi-directional streaming
    rpc FetchRatesFromCache (stream FetchRatesRequest) returns (stream RatesResponse) {}
}