# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import historical_pb2 as historical__pb2


class HistoricalServiceStub(object):
    """Historical service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamSecurityHistory = channel.unary_stream(
                '/HistoricalService/StreamSecurityHistory',
                request_serializer=historical__pb2.SecurityHistoricalRequest.SerializeToString,
                response_deserializer=historical__pb2.InstrumentHistoricalResponse.FromString,
                )
        self.StreamCurrencyHistory = channel.unary_stream(
                '/HistoricalService/StreamCurrencyHistory',
                request_serializer=historical__pb2.CurrencyHistoricalRequest.SerializeToString,
                response_deserializer=historical__pb2.InstrumentHistoricalResponse.FromString,
                )


class HistoricalServiceServicer(object):
    """Historical service definition
    """

    def StreamSecurityHistory(self, request, context):
        """Streams historical data for a particular security
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCurrencyHistory(self, request, context):
        """Streams historical currency data back
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HistoricalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamSecurityHistory': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamSecurityHistory,
                    request_deserializer=historical__pb2.SecurityHistoricalRequest.FromString,
                    response_serializer=historical__pb2.InstrumentHistoricalResponse.SerializeToString,
            ),
            'StreamCurrencyHistory': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCurrencyHistory,
                    request_deserializer=historical__pb2.CurrencyHistoricalRequest.FromString,
                    response_serializer=historical__pb2.InstrumentHistoricalResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HistoricalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HistoricalService(object):
    """Historical service definition
    """

    @staticmethod
    def StreamSecurityHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/HistoricalService/StreamSecurityHistory',
            historical__pb2.SecurityHistoricalRequest.SerializeToString,
            historical__pb2.InstrumentHistoricalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamCurrencyHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/HistoricalService/StreamCurrencyHistory',
            historical__pb2.CurrencyHistoricalRequest.SerializeToString,
            historical__pb2.InstrumentHistoricalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
