# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import trade_simulation_pb2 as trade__simulation__pb2


class TradeSimulationStub(object):
    """Market service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateArbitrageStream = channel.unary_stream(
                '/TradeSimulation/CreateArbitrageStream',
                request_serializer=trade__simulation__pb2.TradeArbitrageRequest.SerializeToString,
                response_deserializer=trade__simulation__pb2.SecurityBase.FromString,
                )
        self.CreateArbitraryStream = channel.unary_stream(
                '/TradeSimulation/CreateArbitraryStream',
                request_serializer=trade__simulation__pb2.TradeArbitraryRequest.SerializeToString,
                response_deserializer=trade__simulation__pb2.SecurityBase.FromString,
                )
        self.CreateHistoricalStream = channel.unary_stream(
                '/TradeSimulation/CreateHistoricalStream',
                request_serializer=trade__simulation__pb2.HistoricalTradeRequest.SerializeToString,
                response_deserializer=trade__simulation__pb2.HistoricalTradeResponse.FromString,
                )


class TradeSimulationServicer(object):
    """Market service definition
    """

    def CreateArbitrageStream(self, request, context):
        """Sends generated market data back, whether historical or randomly generated data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateArbitraryStream(self, request, context):
        """Creates random trade data to be sent back
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateHistoricalStream(self, request, context):
        """Streams historical trade data for a particular security
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradeSimulationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateArbitrageStream': grpc.unary_stream_rpc_method_handler(
                    servicer.CreateArbitrageStream,
                    request_deserializer=trade__simulation__pb2.TradeArbitrageRequest.FromString,
                    response_serializer=trade__simulation__pb2.SecurityBase.SerializeToString,
            ),
            'CreateArbitraryStream': grpc.unary_stream_rpc_method_handler(
                    servicer.CreateArbitraryStream,
                    request_deserializer=trade__simulation__pb2.TradeArbitraryRequest.FromString,
                    response_serializer=trade__simulation__pb2.SecurityBase.SerializeToString,
            ),
            'CreateHistoricalStream': grpc.unary_stream_rpc_method_handler(
                    servicer.CreateHistoricalStream,
                    request_deserializer=trade__simulation__pb2.HistoricalTradeRequest.FromString,
                    response_serializer=trade__simulation__pb2.HistoricalTradeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TradeSimulation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TradeSimulation(object):
    """Market service definition
    """

    @staticmethod
    def CreateArbitrageStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TradeSimulation/CreateArbitrageStream',
            trade__simulation__pb2.TradeArbitrageRequest.SerializeToString,
            trade__simulation__pb2.SecurityBase.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateArbitraryStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TradeSimulation/CreateArbitraryStream',
            trade__simulation__pb2.TradeArbitraryRequest.SerializeToString,
            trade__simulation__pb2.SecurityBase.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateHistoricalStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TradeSimulation/CreateHistoricalStream',
            trade__simulation__pb2.HistoricalTradeRequest.SerializeToString,
            trade__simulation__pb2.HistoricalTradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
