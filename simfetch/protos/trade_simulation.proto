syntax = "proto3";

// Response trade structure which is subject to change, and anyone who wants to change this can.
// Credit to Max Dama on inspiration for this structure
message TradeData {
    uint64 time = 1;
    uint32 security_id = 2;
    uint32 side = 3; // Would make this one byte but alas, protobuf does not support 1 byte datatypes.
    uint64 price = 4;
    uint32 quantity = 5;
}

// Request containing a ticker and the security's starting floating point value.
message TradeArbitrageRequest {
    TradeData trade = 1;
    uint32 num_simulations = 2;
    repeated uint32 id_arbitrages = 3; // List of security ids that we want to create arbitrages for
    uint32 num_dummy = 4; // Quantity of dummy securities passed over the wire
}

// Request to create arbitrary trade data which takes in trade data to respond with a more logical structure
message TradeArbitraryRequest {
    TradeData trade = 1;
    uint32 num_simulations = 2;
    uint32 num_securities = 3; // Number of random securities
}

// Request to fetch historical trade data.
message HistoricalTradeRequest {
    uint32 security_id = 1;
}

// Response to a historical trade request. If no history was found for a particular security, random data generated.
message HistoricalTradeResponse {
    bool history_found = 1;
    repeated TradeData trade = 2;
}

// Market service definition
service TradeSimulation {
    // Sends generated market data back, whether historical or randomly generated data.
    rpc CreateArbitrageStream (TradeArbitrageRequest) returns (stream TradeData) {}

    // Creates random trade data to be sent back
    rpc CreateArbitraryStream (TradeArbitraryRequest) returns (stream TradeData) {}

    // Streams historical trade data for a particular security
    rpc CreateHistoricalStream (HistoricalTradeRequest) returns (stream HistoricalTradeResponse) {}
}