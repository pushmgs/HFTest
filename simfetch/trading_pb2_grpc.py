# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import trading_pb2 as trading__pb2


class TradeSimulationStub(object):
    """Market service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamSecurityArbitrage = channel.unary_stream(
                '/TradeSimulation/StreamSecurityArbitrage',
                request_serializer=trading__pb2.SecurityArbitrageRequest.SerializeToString,
                response_deserializer=trading__pb2.SecurityBase.FromString,
                )
        self.StreamCurrencyArbitrage = channel.unary_stream(
                '/TradeSimulation/StreamCurrencyArbitrage',
                request_serializer=trading__pb2.CurrencyArbitrageRequest.SerializeToString,
                response_deserializer=trading__pb2.CurrencyBase.FromString,
                )
        self.StreamSecurityArbitrary = channel.unary_stream(
                '/TradeSimulation/StreamSecurityArbitrary',
                request_serializer=trading__pb2.SecurityArbitraryRequest.SerializeToString,
                response_deserializer=trading__pb2.SecurityBase.FromString,
                )
        self.StreamCurrencyArbitrary = channel.unary_stream(
                '/TradeSimulation/StreamCurrencyArbitrary',
                request_serializer=trading__pb2.CurrencyArbitraryRequest.SerializeToString,
                response_deserializer=trading__pb2.CurrencyBase.FromString,
                )
        self.StreamSecurityHistory = channel.unary_stream(
                '/TradeSimulation/StreamSecurityHistory',
                request_serializer=trading__pb2.SecurityHistoricalRequest.SerializeToString,
                response_deserializer=trading__pb2.SecurityHistoricalResponse.FromString,
                )
        self.StreamCurrencyHistory = channel.unary_stream(
                '/TradeSimulation/StreamCurrencyHistory',
                request_serializer=trading__pb2.CurrencyHistoricalRequest.SerializeToString,
                response_deserializer=trading__pb2.CurrencyHistoricalResponse.FromString,
                )


class TradeSimulationServicer(object):
    """Market service definition
    """

    def StreamSecurityArbitrage(self, request, context):
        """Sends security arbitrage data back in a one way stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCurrencyArbitrage(self, request, context):
        """Streams currency arbitrage data back one way
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSecurityArbitrary(self, request, context):
        """Creates random trade data to be sent back
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCurrencyArbitrary(self, request, context):
        """Creates random trade data for currencies to be sent back to Orbit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSecurityHistory(self, request, context):
        """Streams historical trade data for a particular security
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCurrencyHistory(self, request, context):
        """Streams historical currency data back
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradeSimulationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamSecurityArbitrage': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamSecurityArbitrage,
                    request_deserializer=trading__pb2.SecurityArbitrageRequest.FromString,
                    response_serializer=trading__pb2.SecurityBase.SerializeToString,
            ),
            'StreamCurrencyArbitrage': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCurrencyArbitrage,
                    request_deserializer=trading__pb2.CurrencyArbitrageRequest.FromString,
                    response_serializer=trading__pb2.CurrencyBase.SerializeToString,
            ),
            'StreamSecurityArbitrary': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamSecurityArbitrary,
                    request_deserializer=trading__pb2.SecurityArbitraryRequest.FromString,
                    response_serializer=trading__pb2.SecurityBase.SerializeToString,
            ),
            'StreamCurrencyArbitrary': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCurrencyArbitrary,
                    request_deserializer=trading__pb2.CurrencyArbitraryRequest.FromString,
                    response_serializer=trading__pb2.CurrencyBase.SerializeToString,
            ),
            'StreamSecurityHistory': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamSecurityHistory,
                    request_deserializer=trading__pb2.SecurityHistoricalRequest.FromString,
                    response_serializer=trading__pb2.SecurityHistoricalResponse.SerializeToString,
            ),
            'StreamCurrencyHistory': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCurrencyHistory,
                    request_deserializer=trading__pb2.CurrencyHistoricalRequest.FromString,
                    response_serializer=trading__pb2.CurrencyHistoricalResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TradeSimulation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TradeSimulation(object):
    """Market service definition
    """

    @staticmethod
    def StreamSecurityArbitrage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TradeSimulation/StreamSecurityArbitrage',
            trading__pb2.SecurityArbitrageRequest.SerializeToString,
            trading__pb2.SecurityBase.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamCurrencyArbitrage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TradeSimulation/StreamCurrencyArbitrage',
            trading__pb2.CurrencyArbitrageRequest.SerializeToString,
            trading__pb2.CurrencyBase.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSecurityArbitrary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TradeSimulation/StreamSecurityArbitrary',
            trading__pb2.SecurityArbitraryRequest.SerializeToString,
            trading__pb2.SecurityBase.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamCurrencyArbitrary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TradeSimulation/StreamCurrencyArbitrary',
            trading__pb2.CurrencyArbitraryRequest.SerializeToString,
            trading__pb2.CurrencyBase.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSecurityHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TradeSimulation/StreamSecurityHistory',
            trading__pb2.SecurityHistoricalRequest.SerializeToString,
            trading__pb2.SecurityHistoricalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamCurrencyHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TradeSimulation/StreamCurrencyHistory',
            trading__pb2.CurrencyHistoricalRequest.SerializeToString,
            trading__pb2.CurrencyHistoricalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
